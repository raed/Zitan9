package TableStructures;

import AbstractObjects.DataObject;
import AbstractObjects.Operators;
import Attributes.AttributeValueList;
import Concepts.AttributeValue;
import Concepts.Concept;
import ConcreteDomain.ConcreteObject;
import MISC.Context;
import Utils.Table;

import java.util.function.Function;
import java.util.stream.Stream;

/** This class allows one to view a particular column of a TableObject as an attribute value.
 *
 * Example:<br>
 * Consider a table type MarkList with columns "Participant, Semester, Mark" <br>
 * A TableAttributeValue could now specify the list of Participants as a list of attribute values.
 * Given an IndividualConcept "exam44", with attribute "MarkList", one could
 * add a ConceptAttribute "participants" with attribute values generated by the TableAttributeValue.
 */
public class TableAttributeValue extends AttributeValue {
    /** the table from where to take the attribute values */
    private TableObject table;
    /** the corresponding column index in the table */
    private int columnIndex;

    /** constructs the attribute value.
     *
     * @param table       the table intervalContaining the values.
     * @param columnIndex the corresponding column index.
     */
    public TableAttributeValue(TableObject table, int columnIndex) {
        this.table = table;
        this.columnIndex = columnIndex;}

    /** returns the column as a stream of DataObjects
     *
     * @return a stream of DataObjects
     */
    public Stream<DataObject> stream() {
        return table.columnStream(columnIndex);}


    /** Returns the first value, but if the operator != null, it returns the first one with 'value operator otherValue' yields true.
     *
     * @param operator          an operator
     * @param otherValue        for comparing: 'this operator otherValue'
     * @param otherConstraints  not needed
     * @param context           the context
     * @return the first value if it satisfying the condition, or null.
     * */
    @Override
    public DataObject getFirst(Operators operator, DataObject otherValue, AttributeValueList otherConstraints, Context context) {
        assert (operator == null) == (otherValue == null);
        Table<DataObject> tbl = table.table;
        DataObject first = tbl.getItem(0, columnIndex);
        if (operator == null) {return first;}
        int nRows = tbl.nRows();
        if(first instanceof ConcreteObject) {
            for (int row = 0; row < nRows; ++row) {
                ConcreteObject item = (ConcreteObject)tbl.getItem(row, columnIndex);
                if(item.compare(operator,(ConcreteObject)otherValue)) {return item;}}}
        else {
            for (int row = 0; row < nRows; ++row) {
                Concept item = (Concept)tbl.getItem(row, columnIndex);
                if(item.compare(operator,(Concept)otherValue,context)) {return item;}}}
        return null;}

    /** searches through the attribute values to find the first one satisfying the conditions, and where the function returns not null.
     *
     *  The conditions are:<br>
     *     - if operator != null then 'value operator otherValue' must return true <br>
     *     - if otherConstraints != null the 'this.constraints implies otherConstraints' must return true.
     *
     * @param <T>           the result type of the function
     * @param operator      an operator
     * @param otherValue    for comparing: 'this operator otherValue
     * @param otherConstraints for comparing this.constraints implies otherConstraints
     * @param context       the context
     * @return the result of the first non-null function application.
     */
    @Override
    public <T> T find(Operators operator, DataObject otherValue, AttributeValueList otherConstraints, Context context, Function<DataObject,T> function) {
        assert (operator == null) == (otherValue == null);
        Table<DataObject> tbl = table.table;
        DataObject first = tbl.getItem(0, columnIndex);
        int nRows = tbl.nRows();
        if(first instanceof ConcreteObject) {
            for (int row = 0; row < nRows; ++row) {
                ConcreteObject item = (ConcreteObject)tbl.getItem(row, columnIndex);
                if(operator != null && !item.compare(operator,(ConcreteObject)otherValue)) {continue;}
                T result = function.apply(item);
                if(result != null) {return result;}}}
        else {
            for (int row = 0; row < nRows; ++row) {
                Concept item = (Concept)tbl.getItem(row, columnIndex);
                if(operator != null && !item.compare(operator,(Concept)otherValue,context)) {continue;}
                T result = function.apply(item);
                if(result != null) {return result;}}}
        return null;}


    /** turns those attribute values which satisfy the conditions into a stream of DataObjects.
     * The stream may be empty.
     *
     *  The conditions are:<br>
     *     - if operator != null then 'value operator otherValue' must return true <br>
     *     - if otherConstraints != null the 'this.constraints implies otherConstraints' must return true.
     * <br>
     *
     * @param operator          an operator or null
     * @param otherValue        for comparing: 'this operator otherValue
     * @param otherConstraints  for comparing this.constraints implies otherConstraints
     * @param context           the context
     * @return the generated stream (possibly empty).
     */
    public Stream<DataObject> stream(Operators operator, DataObject otherValue, AttributeValueList otherConstraints, Context context) {
        assert (operator == null) == (otherValue == null);
        Table<DataObject> tbl = table.table;
        if(operator == null) {return tbl.columnStream(columnIndex);}
        DataObject first = tbl.getItem(0, columnIndex);
        if(first instanceof ConcreteObject) {
            return tbl.columnStream(columnIndex).filter(item -> ((ConcreteObject)item).compare(operator,(ConcreteObject)otherValue));}
        else {return tbl.columnStream(columnIndex).filter(item -> ((Concept)item).compare(operator,(Concept)otherValue,context));}
    }

}
